{"version":3,"sources":["components/Blur.js","components/Button.js","components/Nav.js","components/Sidemenu.js","App.js","serviceWorker.js","index.js"],"names":["Blur","props","clss","anm","className","Btn_nav","onClick","click","id","bar1","bar2","bar3","Nav","children","Sidemenu","anmSide","sd_class","App","state","open","anm_side","anm_btn","anm_blur","clickHandler","setState","this","Component","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOASeA,EAPF,SAACC,GACV,IAAIC,EAAI,eAAWD,EAAME,KACzB,OACI,yBAAKC,UAAWF,KCOTG,EAVC,SAACJ,GACb,OACI,yBAAKG,UAAU,YAAYE,QAASL,EAAMM,OACtC,0BAAMC,GAAG,MAAMJ,UAAWH,EAAME,IAAIM,OACpC,0BAAMD,GAAG,MAAMJ,UAAWH,EAAME,IAAIO,OACpC,0BAAMF,GAAG,MAAMJ,UAAWH,EAAME,IAAIQ,SCCjCC,EANH,SAACX,GACT,OACA,yBAAKG,UAAU,OAAOH,EAAMY,WCWjBC,EAbE,SAACb,GACd,IAAMc,EAAO,mBAAed,EAAMe,UAClC,OACI,yBAAKZ,UAAWW,GACZ,yBAAKX,UAAU,cAAf,YACA,yBAAKA,UAAU,cAAf,YACA,yBAAKA,UAAU,cAAf,WACA,yBAAKA,UAAU,cAAf,WACA,yBAAKA,UAAU,cAAf,YC4CGa,G,kNA9CbC,MAAQ,CACNC,MAAM,EACNC,SAAU,qBACVC,QAAS,CACPZ,KAAM,GACNC,KAAM,GACNC,KAAM,IAERW,SAAU,I,EAGZC,aAAe,WACb,IAAML,EAAQ,EAAKA,MACbG,EAAU,EAAKH,MAAMG,QACvBC,EAAW,EAAKJ,MAAMI,SAC1B,EAAKE,SAAS,CAACL,MAAOD,EAAMC,QACV,IAAfD,EAAMC,MACPE,EAAQZ,KAAO,OACfY,EAAQX,KAAO,OACfW,EAAQV,KAAO,OACfW,EAAW,WACX,EAAKE,SAAS,CAACJ,SAAU,oBACXC,QAASA,EACTC,SAAUA,MAExBD,EAAQZ,KAAO,GACfY,EAAQX,KAAO,GACfW,EAAQV,KAAO,GACfW,EAAW,GACX,EAAKE,SAAS,CAACJ,SAAU,qBACXC,QAASA,EACTC,SAAUA,M,uDAK1B,OACE,6BACE,kBAAC,EAAD,KAAK,kBAAC,EAAD,CAAWf,MAAOkB,KAAKF,aAAcpB,IAAKsB,KAAKP,MAAMG,WAC1D,kBAAC,EAAD,CAAMlB,IAAKsB,KAAKP,MAAMI,WACtB,kBAAC,EAAD,CAAUN,SAAUS,KAAKP,MAAME,gB,GAzCrBM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAK,kBAAC,EAAD,MAEXC,IAASC,OACLF,EAAKG,SAASC,eAAe,SD0H3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8908c4fa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Blur = (props) => {\r\n    let clss = `blur ${props.anm}`;\r\n    return (\r\n        <div className={clss}></div>        \r\n    )\r\n}\r\n\r\nexport default Blur;","import React from 'react';\r\n\r\nconst Btn_nav = (props) => {\r\n    return (\r\n        <div className=\"btn_buger\" onClick={props.click}>\r\n            <span id=\"bar\" className={props.anm.bar1}></span>\r\n            <span id=\"bar\" className={props.anm.bar2}></span>\r\n            <span id=\"bar\" className={props.anm.bar3}></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Btn_nav;","import React from 'react';\r\n\r\nconst Nav = (props) => {\r\n    return(\r\n    <div className=\"nav\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nconst Sidemenu = (props) => {\r\n    const anmSide = `side_bar ${props.sd_class}`;\r\n    return (\r\n        <div className={anmSide}>\r\n            <div className=\"side_item1\">About us</div>\r\n            <div className=\"side_item2\">Contact </div>\r\n            <div className=\"side_item3\">Members</div>\r\n            <div className=\"side_item4\">Product</div>\r\n            <div className=\"side_item5\">Career</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidemenu;","import React, { Component } from 'react';\nimport Blur from './components/Blur';\nimport NavButton from './components/Button';\nimport Nav from './components/Nav';\nimport Sidemenu from './components/Sidemenu';\nimport './App.css';\n\nclass App extends Component {  \n  state = {\n    open: false,\n    anm_side: \"anm_sidemenu_close\",\n    anm_btn: {\n      bar1: \"\",\n      bar2: \"\",\n      bar3: \"\"\n    },\n    anm_blur: \"\",\n  };\n\n  clickHandler = () => {\n    const state = this.state;\n    const anm_btn = this.state.anm_btn;\n    let anm_blur = this.state.anm_blur;\n    this.setState({open: !state.open});\n    if(state.open === false) {\n      anm_btn.bar1 = \"bar1\";\n      anm_btn.bar2 = \"bar2\";\n      anm_btn.bar3 = \"bar3\";\n      anm_blur = \"blur_anm\";\n      this.setState({anm_side: \"anm_sidemenu_draw\",\n                    anm_btn: anm_btn,\n                    anm_blur: anm_blur});\n    } else {\n      anm_btn.bar1 = \"\";\n      anm_btn.bar2 = \"\";\n      anm_btn.bar3 = \"\";\n      anm_blur = \"\";\n      this.setState({anm_side: \"anm_sidemenu_close\",\n                    anm_btn: anm_btn,\n                    anm_blur: anm_blur});\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav><NavButton click={this.clickHandler} anm={this.state.anm_btn}/></Nav>\n        <Blur anm={this.state.anm_blur}/>\n        <Sidemenu sd_class={this.state.anm_side}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app =<App/>\n\nReactDOM.render(\n    app ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}